{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 28 bytes.\nThe binary function is storing 40 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 10\nloop length        : 40\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "FIT IN UOP CACHE\nfront end: 1.25 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.00 | 1.00 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.00 | 0.00 | 0.00 | 0.00 | 2.33 | 2.33 | 2.33 | 2.00 | 2.00\ncycles | 1.00 | 1.00 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.00 | 0.00 | 0.00 | 0.00 | 2.33 | 2.33 | 2.33 | 2.00 | 2.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 1.25\nOverall L1: 2.33\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 2.33 cycles. At this rate:\n - 12% of peak load performance is reached (12.00 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 35% of peak store performance is reached (17.14 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 402c6c\n\nInstruction                                                                                                                                                                                                    | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8 | P9 | P10 | P11 | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSTP X29, X30, [SP, #960]!                                                                                                                                                                                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nADD X29, SP, #0                                                                                                                                                                                                | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSTR X19, [SP, #16]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTR X0, [X29, #40]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTR X1, [X29, #32]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nLDR S0, [X29, #56]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (25.0%)\nB 402cd0 <_ZN5boost6random6detail14new_uniform_01IfEclINS0_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEfRT_+0x64> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nLDR X19, [SP, #16]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.33              | scal (50.0%)\nLDP X29, X30, [SP], #64                                                                                                                                                                                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | N/A\nRET                                                                                                                                                                                                            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "0% of peak computational performance is used (0.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 2.33 to 0.67 cycles (3.50x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                "details": "All VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is not vectorized.\nOnly 54% of vector register length is used (average across all VPU instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 2.33 to 1.58 cycles (1.47x speedup)."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 28 bytes.\nThe binary function is storing 40 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 10\nloop length        : 40\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "FIT IN UOP CACHE\nfront end: 1.25 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.00 | 1.00 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.00 | 0.00 | 0.00 | 0.00 | 2.33 | 2.33 | 2.33 | 2.00 | 2.00\ncycles | 1.00 | 1.00 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.33 | 0.00 | 0.00 | 0.00 | 0.00 | 2.33 | 2.33 | 2.33 | 2.00 | 2.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 1.25\nOverall L1: 2.33\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 2.33 cycles. At this rate:\n - 12% of peak load performance is reached (12.00 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 35% of peak store performance is reached (17.14 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 402c6c\n\nInstruction                                                                                                                                                                                                    | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8 | P9 | P10 | P11 | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSTP X29, X30, [SP, #960]!                                                                                                                                                                                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nADD X29, SP, #0                                                                                                                                                                                                | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSTR X19, [SP, #16]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTR X0, [X29, #40]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTR X1, [X29, #32]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nLDR S0, [X29, #56]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (25.0%)\nB 402cd0 <_ZN5boost6random6detail14new_uniform_01IfEclINS0_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEfRT_+0x64> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nLDR X19, [SP, #16]                                                                                                                                                                                             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.33              | scal (50.0%)\nLDP X29, X30, [SP], #64                                                                                                                                                                                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | N/A\nRET                                                                                                                                                                                                            | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0  | 0  | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 2.33 to 0.67 cycles (3.50x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                  "details": "All VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is not vectorized.\nOnly 54% of vector register length is used (average across all VPU instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 2.33 to 1.58 cycles (1.47x speedup)."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
